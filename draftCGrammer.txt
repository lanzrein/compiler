PROGRAM = SEQUENCE | $
SEQUENCE = VARDECL, FUNCPROTO, FUNCDEF


VARDECL = TYPE LISTIDENT SEMICOLON
LISTIDENT = DECL COMMA LISTIDENT
DECL = IDENT | IDENT LPAR INTCONST RPAR

FUNCPROTO = FUNCDECL SEMICOLON
FUNCDECL = TYPE IDENT LPAR FORMALPARALIST RPAR
FORMALPARALIST = FORMALPARAM COMMA FORMALPARALIST | FORMALPARALIST $ 
FORMALPARAM = TYPE IDENT | TYPE IDENT RBRACKET LBRACKET

FUNCTIONDEF = FUNCDECL LBRACE LISTDECL LISTSTATEMENT RBRACE
LISTDECL = DECL LISTDECL | LISTDECL $ 
LISTSTATEMENT = STATEMENT LISTSTATEMENT | LISTSTATEMENT $

STATEMENTBLOCK = LBRACE LISTSTATEMENT RBRACE
STATEMENT = $ SEMICOLON | EXPRESSION SEMICOLON | BREAK SEMICOLON | CONTINUE SEMICOLON 
			| RETURN SEMICOLON | RETURN EXPRESSION SEMICOLON | IFSTATEMENT | FORSTATEMENT
			| WHILESTATEMENT
			
IFSTATEMENT = IF LPAR EXPR RPAR STATETEMENTORBLOCK
STATETEMENTORBLOCK = STATEMENT SEMICOLON | STATEMENTBLOCK
FORSTATEMENT = FOR LPAR (EXPR) SEMICOLON (EXPR) SEMICOLON (EXPR) RPAR STATETEMENTORBLOCK
WHILEPART = WHILE LPAR EXPRESSION RPAR
WHILESTATEMENT = WHILEPART STATETEMENTORBLOCK
DOWHILESTATEMENT = DO STATETEMENTORBLOCK WHILEPART

EXPRESSION = INTCONST | REALCONST | IDENT | IDENT AMPERSAND | IDENTEXPR | LVALUEEXPR
EXPRESSIONLIST = EXPRESSSION COMMA EXPRESSIONLIST 

IDENTEXPR = IDENT | IDENT AMPERSAND | IDENT LPAR EXPRESSIONLIST RPAR
LVALUEEXPR = LVALUE ASSIGN EXPRESSION | INCR LVALUE | LVALUE INCR | LVALUE DECR | DECR LVALUE
UNARYEXPR = UNARYOP EXPR | EXPR BINARYOP EXPR | EXPR QUEST EXPR COLON EXPR
PARENTHESISEXPR = LPAR TYPE RPAR EXPRESSION | LPAR EXPRESSION RPAR
LVALUE = IDENT | IDENT LPAR EXPRESSION RPAR
UNARYOP = MINUS | BANG | TILDE
BINARYOP = EQUALS | NOTEQ | GT | GE | LT | LE | PLUS | MINUS 
			| STAR | SLASH | PERCENT | PIPE | AMPERSAND |DPIPE | DAMPERSAND
			
			
			
lvalue : IDENT optionbrack;
optionbrack : LBRACKET expression RBRACKET | %empty;	
expression1 : expressionlist | expression2;
expression2 : lvalueassign | expression3;
expression3 : questcolon | expression4;
expression4 : dpipeexp | expression5;
expression5 : dampexp | expression6;
expression6 : pipeexp | expression7;
expression7 : ampexp | expression8;
expression8 : eqexpr | expression9;
expression8 : compexpre | expression10;
expression10 : plusminusexpr | expression11;
expression11 : starslashexpre | expression12;
expression12 : unaryexpr | expression13
expression13 : parentheseexpre 

expressionlist : expression COMMA expressionlist | expression;
lvalueassigne : lvalueassign ASSIGN expression | lvalue;
questcolon : expression QUEST expression COLON expression;
dpipeexp : dpipeexp DPIPE expression | expression;
dampexp : dampexp DAMP expression | expression;
ampexp : ampexp AMP expression | expression;
eqexpr : expression | eqexpr EQUALS expression | eqexpr NEQUALS expression;
compexpre : compexpre LE expression | compexpre LT expression | compexpre GE expression 
			| compexpre GT expression | expression ; 
plusminusexpr : plusminusexpr PLUS expression | plusminusexpr MINUS expression | expression; 
starslashexpre : starslashexpre STAR expression | starslashexpre SLASH expression 
				| starslashexpre MOD expression | expression; 
unaryexpr : BANG unaryexpr | TILDE unaryexpr | INCR lvalue | lvalue INCR | lvalue DECR | DECR lvalue 
			| AMP unaryexpr | MINUS unaryexpr | expression ; 
			
			
			
			
			
			
			
			
			


//about expressions. ALL CONFLICTS COME FROM BELOW !!
expression : parenthesisexpression | unaryexpr | litteral | identexpression | lvalueexpr ; 
expressionlist : expression COMMA expressionlist | expression ; 
litteral : STRCONST | INTCONST | REALCONST | CHARCONST;

identexpression : IDENT | AMP IDENT | IDENT LPAR expressionlist RPAR ;
lvalueexpr : lvalue ASSIGN expression | INCR lvalue | lvalue INCR | DECR lvalue | lvalue DECR ; 
unaryexpr : unaryop expression | expression binaryop expression | expression QUEST expression COLON expression ; 
parenthesisexpression : LPAR TYPE RPAR expression | LPAR expression RPAR ; 

//others for statement
lvalue : IDENT | IDENT LBRACKET expression RBRACKET ; 
unaryop : MINUS | BANG | TILDE ; 
binaryop : EQUALS | NEQUAL | GT | GE | LT | LE | PLUS | MINUS | STAR |
			SLASH | MOD | AMP | PIPE | DPIPE | DAMP ; 
			
			
			
///THIS WORKS !!
expression : expression2  | more ;
more : IDENT LBRACKET expression RBRACKET | IDENT LPAR expressionlist RPAR ;
expressionlist : expression3 COMMA expressionlist | expression3 ; 

expression2 : lvalue ASSIGN expression | expression3;
expression3 : expression3 QUEST expression4 COLON expression4  | expression4;
expression4 : expression4 DPIPE expression5 | expression5;
expression5 : expression5 DAMP expression6 | expression6;
expression6 : expression6 PIPE expression7 | expression7;
expression7 : expression7 AMP expression8 | expression8;
expression8 : expression8 eqneqop expression9 | expression9;
eqneqop : EQUALS | NEQUAL;
expression9 : expression9 compop expression10 | expression10;
compop : GT | GE | LT | LE;
expression10 :  expression10 plusminus expression11 | expression11;
plusminus : PLUS | MINUS;
expression11 : expression11 starslashmodop expression12 | expression12;
starslashmodop : STAR | SLASH | MOD;
expression12 : unaryop expression12 | MINUS expression12 %prec UMINUS | AMP IDENT %prec UMINUS| incrdecr lvalue | lvalue incrdecr 
				|expression13;
incrdecr : INCR | DECR;
unaryop : BANG | TILDE   ;
expression13 : LPAR TYPE RPAR expression13 | LPAR expression13 RPAR | constant;
constant : CHARCONST | INTCONST | REALCONST | STRCONST | IDENT ;

